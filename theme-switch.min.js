;(function(){"use strict";function b(d,a,b){if(a in d){Object.defineProperty(d,a,{value:b,enumerable:true,configurable:true,writable:true})}else{d[a]=b}return d}const c=24;const d="#000";const e="theme";const f="auto";const g="dark";const h="light";const i=h;const j="data-theme";const k="(prefers-color-scheme: dark)";const l=[10,0,33,0];const m=[10,0,20,1];const n=[5,1,33,1];class o extends HTMLElement{constructor(){super();b(this,"shadowRoot",void 0);this.shadowRoot=this.attachShadow({mode:"open"});this.shadowRoot.innerHTML=p(...u());this.shadowRoot.host.addEventListener("click",this.toggleTheme);const c=document.createElement("style");c.textContent=q();this.shadowRoot.append(c)}toggleTheme(){let b=s();if(b===f){localStorage.setItem(e,h);this.animateThemeButtonIconToLight()}else if(b===g){localStorage.setItem(e,f);this.animateThemeButtonIconToAuto()}else{localStorage.setItem(e,g);this.animateThemeButtonIconToDark()}r()}animateThemeButtonIconToLight(){this.shadowRoot.getElementById("letter-anim-hide").beginElement();this.shadowRoot.getElementById("core-anim-shrink").beginElement();this.shadowRoot.getElementById("rays-anim-rotate").beginElement();this.shadowRoot.getElementById("rays-anim-show").beginElement()}animateThemeButtonIconToAuto(){this.shadowRoot.getElementById("eclipse-anim-go").beginElement();this.shadowRoot.getElementById("letter-anim-show").beginElement()}animateThemeButtonIconToDark(){this.shadowRoot.getElementById("rays-anim-hide").beginElement();this.shadowRoot.getElementById("core-anim-enlarge").beginElement();this.shadowRoot.getElementById("eclipse-anim-come").beginElement()}}function p(e,a,b,c){return`
    <!-- Using <button> element allows the element to be focused and is more semantic -->
    <button id="theme-switch">
      <!-- See https://stackoverflow.com/q/34393465/8583692 -->
      <svg viewBox="0 0 24 24" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <mask id="mask">
            <!-- Fill the entire viewBox as the mask default (show everything) -->
            <rect width="100%" height="100%" fill="#fff"/>
            <circle id="eclipse" r="10" cx="${b}" cy="6">
              <animate id="eclipse-anim-come" fill="freeze" attributeName="cx" to="20" dur="300ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines="0.37, 0, 0.63, 1"/>
              <animate id="eclipse-anim-go" fill="freeze" attributeName="cx" to="33" dur="300ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines="0.37, 0, 0.63, 1"/>
            </circle>
            <!-- See https://youtu.be/7aobRPg7BXI -->
            <path id="letter" fill="none" stroke="#000" stroke-width="2" stroke-linejoin="round" stroke-linecap="round" pathLength="1" stroke-dasharray="1 1" stroke-dashoffset="${c}" d="m8 16.5 4-9 4 9-1-2h-6">
              <animate id="letter-anim-show" fill="freeze" attributeName="stroke-dashoffset" to="0" dur="400ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines=".67,.27,.55,.9"/>
              <animate id="letter-anim-hide" fill="freeze" attributeName="stroke-dashoffset" to="1" dur="15ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines="0.37, 0, 0.63, 1"/>
            </path>
          </mask>
        </defs>
        <g id="visible-content" mask="url(#mask)">
          <g id="rays" opacity="${a}" fill="none" stroke="#000" stroke-width="2" stroke-linecap="round">
            <animate id="rays-anim-hide" fill="freeze" attributeName="opacity" to="0" dur="100ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines="0.37, 0, 0.63, 1"/>
            <animate id="rays-anim-show" fill="freeze" attributeName="opacity" to="1" dur="300ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines="0.37, 0, 0.63, 1"/>
            <animateTransform id="rays-anim-rotate" attributeName="transform" attributeType="XML" type="rotate" from="-25 12 12" to="0 12 12" dur="300ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines="0.37, 0, 0.63, 1"/>
            <path d="m12 1v3"/>
            <path d="m23 12h-3"/>
            <path d="m19.778 4.2218-2.121 2.1213"/>
            <path d="m19.778 19.778-2.121-2.121"/>
            <path d="m4.222 19.778 2.121-2.121"/>
            <path d="m4.222 4.222 2.121 2.121"/>
            <path d="m4 12h-3"/>
            <path d="m12 20v3"/>
          </g>
          <circle id="circle" r="${e}" cx="12" cy="12">
            <animate id="core-anim-enlarge" fill="freeze" attributeName="r" to="10" dur="300ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines="0.37, 0, 0.63, 1"/>
            <animate id="core-anim-shrink" fill="freeze" attributeName="r" to="5" dur="300ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines="0.37, 0, 0.63, 1"/>
          </circle>
        </g>
      </svg>
    </button>
    `}function q(){return`
    /* :host === the host element of the shadow === <theme-switch> */
    /* See https://developer.mozilla.org/en-US/docs/Web/CSS/:host */
    :host {
      display: flex;
      width: ${c}px;
      aspect-ratio: 1 / 1;
      /* This is for when the element has padding */
      cursor: pointer;
    }

    :host([hidden]) { display: none; }

    button {
      padding: 0;
      border: none;
      background: transparent;
      display: flex;
      /* The host element also has its cursor set */
      cursor: pointer;
    }

    #circle { fill: var(--theme-switch-icon-color, ${d}); }

    #rays { stroke: var(--theme-switch-icon-color, ${d}); }
    `}r();window.customElements.define("theme-switch",o);window.matchMedia(k).addEventListener("change",r);function r(){let b=s();if(b===f)b=t();document.documentElement.setAttribute(j,b)}function s(){const b=localStorage.getItem(e);return b===null?i:b}function t(){const b=window.matchMedia(k).matches;return b?g:h}function u(){let b=s();if(b===f){return l}else if(b===g){return m}else{return n}}})();

//# sourceMappingURL=theme-switch.min.js.map