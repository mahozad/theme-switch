;(function(){"use strict";const a=24;const b="theme";const c="auto";const d="dark";const e="light";const f=e;const g="data-theme";const h="(prefers-color-scheme: dark)";const i=[10,0,33,0];const j=[10,0,20,1];const k=[5,1,33,1];let l;class m extends HTMLElement{constructor(){super();l=this.attachShadow({mode:"open"});l.innerHTML=n(...s());l.host.addEventListener("click",t);const b=document.createElement("style");b.textContent=o();l.append(b)}}function n(e,a,b,c){return`
    <!-- Using <button> element allows the element to be focused and is more semantic -->
    <button id="theme-switch">
      <!-- See https://stackoverflow.com/q/34393465/8583692 -->
      <svg viewBox="0 0 24 24" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <mask id="mask">
            <!-- Fill the entire viewBox as the mask default (show everything) -->
            <rect width="100%" height="100%" fill="#fff"/>
            <circle id="eclipse" r="10" cx="${b}" cy="6">
              <animate id="eclipse-anim-come" fill="freeze" attributeName="cx" to="20" dur="300ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines="0.37, 0, 0.63, 1"/>
              <animate id="eclipse-anim-go" fill="freeze" attributeName="cx" to="33" dur="300ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines="0.37, 0, 0.63, 1"/>
            </circle>
            <!-- See https://youtu.be/7aobRPg7BXI -->
            <path id="letter" fill="none" stroke="#000" stroke-width="2" stroke-linejoin="round" stroke-linecap="round" pathLength="1" stroke-dasharray="1 1" stroke-dashoffset="${c}" d="m8 16.5 4-9 4 9-1-2h-6">
              <animate id="letter-anim-show" fill="freeze" attributeName="stroke-dashoffset" to="0" dur="400ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines=".67,.27,.55,.9"/>
              <animate id="letter-anim-hide" fill="freeze" attributeName="stroke-dashoffset" to="1" dur="15ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines="0.37, 0, 0.63, 1"/>
            </path>
          </mask>
        </defs>
        <g id="visible-content" mask="url(#mask)">
          <g id="rays" opacity="${a}" fill="none" stroke="#000" stroke-width="2" stroke-linecap="round">
            <animate id="rays-anim-hide" fill="freeze" attributeName="opacity" to="0" dur="100ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines="0.37, 0, 0.63, 1"/>
            <animate id="rays-anim-show" fill="freeze" attributeName="opacity" to="1" dur="300ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines="0.37, 0, 0.63, 1"/>
            <animateTransform id="rays-anim-rotate" attributeName="transform" attributeType="XML" type="rotate" from="-25 12 12" to="0 12 12" dur="300ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines="0.37, 0, 0.63, 1"/>
            <path d="m12 1v3"/>
            <path d="m23 12h-3"/>
            <path d="m19.778 4.2218-2.121 2.1213"/>
            <path d="m19.778 19.778-2.121-2.121"/>
            <path d="m4.222 19.778 2.121-2.121"/>
            <path d="m4.222 4.222 2.121 2.121"/>
            <path d="m4 12h-3"/>
            <path d="m12 20v3"/>
          </g>
          <circle id="circle" r="${e}" cx="12" cy="12">
            <animate id="core-anim-enlarge" fill="freeze" attributeName="r" to="10" dur="300ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines="0.37, 0, 0.63, 1"/>
            <animate id="core-anim-shrink" fill="freeze" attributeName="r" to="5" dur="300ms" begin="indefinite" calcMode="spline" keyTimes="0; 1" keySplines="0.37, 0, 0.63, 1"/>
          </circle>
        </g>
      </svg>
    </button>
    `}function o(){return`
    /* :host === the host element of the shadow === <theme-switch> */
    /* See https://developer.mozilla.org/en-US/docs/Web/CSS/:host */
    :host {
        display: flex;
        width: ${a}px;
        aspect-ratio: 1 / 1;
        /* This is for when the element has padding */
        cursor: pointer;
    }

    button {
        padding: 0;
        border: none;
        background: transparent;
        display: flex;
        /* The host element also has its cursor set */
        cursor: pointer;
    }

    /* Only change the color of the core and not rays */
    /* as it seems to make a visually better animation */
    #circle {
        fill: var(--theme-switch-icon-color);
        stroke: var(--theme-switch-icon-color);
    }
    `}p();window.customElements.define("theme-switch",m);window.matchMedia(h).addEventListener("change",p);function p(){let b=q();if(b===c)b=r();document.documentElement.setAttribute(g,b)}function q(){const c=localStorage.getItem(b);return c===null?f:c}function r(){const b=window.matchMedia(h).matches;return b?d:e}function s(){let b=q();if(b===c){return i}else if(b===d){return j}else{return k}}function t(){let f=q();if(f===c){localStorage.setItem(b,e);u()}else if(f===d){localStorage.setItem(b,c);v()}else{localStorage.setItem(b,d);w()}p()}function u(){l.getElementById("letter-anim-hide").beginElement();l.getElementById("core-anim-shrink").beginElement();l.getElementById("rays-anim-rotate").beginElement();l.getElementById("rays-anim-show").beginElement()}function v(){l.getElementById("eclipse-anim-go").beginElement();l.getElementById("letter-anim-show").beginElement()}function w(){l.getElementById("rays-anim-hide").beginElement();l.getElementById("core-anim-enlarge").beginElement();l.getElementById("eclipse-anim-come").beginElement()}if(typeof module!=="undefined"){module.exports={updateTheme:p,toggleTheme:t,getSystemTheme:r,getUserThemeSelection:q,getInitialStateForIcon:s,animateThemeButtonIconToAuto:v,animateThemeButtonIconToDark:w,animateThemeButtonIconToLight:u}}})();

//# sourceMappingURL=theme-switch.min.js.map